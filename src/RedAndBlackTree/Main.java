package RedAndBlackTree;

/**
 * Задание 1. Преобразование дерева поиска в красно-черное дерево
 * Вам дано бинарное дерево поиска. Напишите метод, который преобразует его в
 * левостороннее красно-черное дерево (РЧД). Красно-черное дерево должно
 * удовлетворять следующим критериям:
 * 1. Каждая нода имеет цвет (красный или черный).
 * 2. Корень дерева всегда черный.
 * 3. Новая нода всегда красная.
 * 4. Красные ноды могут быть только левыми дочерними элементами.
 * 5. У красной ноды все дочерние элементы черного цвета.
 * Для этого, реализуйте методы добавления новых элементов с балансировкой и
 * выполняйте следующие операции для поддержания свойств РЧД:
 * ● Левый малый поворот
 * ● Правый малый поворот
 * ● Смена цвета
 * Критерии применения этих операций:
 * ● Если правый дочерний элемент красный, а левый черный, то применяем
 * малый правый поворот.
 * ● Если левый дочерний элемент красный и его левый дочерний элемент
 * тоже красный, то применяем малый левый поворот.
 * ● Если оба дочерних элемента красные, то делаем смену цвета.
 * ● Если корень стал красным, то перекрашиваем его в черный.
 */
public class Main {
    public static void main(String[] args) {
        RedBlackTree<Integer> tree = new RedBlackTree<>();
        tree.insert(55);
        tree.insert(40);
        tree.insert(65);
        tree.insert(60);
        tree.insert(75);
        tree.insert(57);
        tree.printTree();
    }
}

